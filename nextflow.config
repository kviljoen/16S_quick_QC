manifest
{
  homePage = 'https://github.com/kviljoen/16S_quick_QC'
  description = 'WGS QC'
  mainScript = 'main.nf'
}



executor{
    jobName = { "$task.tag" }
}

params {

    projectName = "fastqc"
    rawReads = "*{R1,R2}.fastq.gz"
    outdir = "./fastqc_results"
}

profiles{
    standard {
        process.executor = 'local'
    }

   uct_hex {
	includeConfig 'conf/uct_hex.config'
	includeConfig 'conf/base.config'
    }
}

params {
	/*--------------------------------*
	 *	SOFTWARE PARAMETERS
	 *--------------------------------*/

	//BBduk parameters for trimming	
	qin=33 //Input quality offset: 33 (ASCII+33) or 64 (ASCII+64)
	kcontaminants = 23 //Kmer length used for finding contaminants	
	phred = 10 //regions with average quality BELOW this will be trimmed 
	minlength = 60 //reads shorter than this after trimming will be discarded
    	mink = 11 //shorter kmers at read tips to look for 
	hdist = 1  //maximum Hamming distance for ref kmers      
	

	//BBwrap parameters for decontamination	
	mind = 0.95 //Approximate minimum alignment identity to look for
	maxindel = 3 //longest indel to look for
	bwr=0.16 //restrict alignment band to this
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
